import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { ethers } from 'ethers'
import { useEffect, useState } from 'react'
import axios from 'axios'
import Web3Modeal from 'web3modal'

import { nftaddress, nftmarketaddress } from '../config'

import NFT from '../artifacts/contracts/NFT.sol/NFT.json'
import KPMarket from '../artifacts/contracts/KPMarket.sol/KPMarket.json'

export default function Home() {
  const [nfts, setNFTs] = useState([])
  const [loadingState, setLoadingState] = useState('not-loaded')

  useEffect(() => {
    loadNFTs()
  }, [])

  async function loadNFTs() {
    const provider = new ethers.providers.JsonRpcProvider()
    const tokenContract = new ethers.Contract(nftaddress, NFT.abi, provider)
    const marketContract = new ethers.Contract(nftmarketaddress, KPMarket.abi, provider)
    const data = await marketContract.fetchMarketTokens()

    const items = await Promise.all(data.map(async i => {
      const tokenUri = await tokenContract.tokenUri(i.tokenId)
      const meta = await axios.get(tokenUri)
      let price = ethers.utils.formatUnits(i.price.toString(), 'ether')
      let item = {
        price,
        tokenId: i.tokenId.toNumber(),
        seller: i.seller,
        owner: i.owner,
        image: meta.data.image,
        name: meta.data.name,
        description: meta.data.description
      }
      return item
    }))
    setNFTs(items)
    setLoadingState('loaded')

  }

  async function buyNFT(nft) {
    const web3Modal = new Web3Modeal()
    const connection = await web3Modal.connect()
    const provider = new ethers.providers.Web3Provider(connection)
    const signer = provider.getSigner()
    const contract = new ethers.BaseContract.Contract(nftmarketaddress, KPMarket.abi, signer)

    const price = ethers.utils.parseUnits(nft.price.toString(), 'ether')
    const transaction = await contract.createMarketSale(nftaddress, nft.tokenId, {
      value: price
    })

    await transaction.wait()

    loadNFTs()
  }

  if (loadingState === 'loaded' && nfts.length) return (
    <h1 className='px-20 py-7 text-4x1'>No NFTs in marketplace</h1>
  )

  return (
    <div className={styles.container}>
      <Head>
        <title>Marketplace</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>

        <div className='flex justify-center'>
          <div className='px-4' style={{ maxWidth: '160px' }}>
            <div className='grid grid-clos-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4'>
              {
                nfts.map((nft, index) => {
                  <div key={index} className='border shadow rounded-x1 overflow-hidden'>
                    <img src={nft.image} />
                    <div className='p-4'>
                      <p style={{ height: '64px' }} className='text-3x1 font-semibold'>
                        {nft.name}
                      </p>
                      <div style={{ height: '72px', overflow: 'hidden' }}>
                        <p className='text-grey-400'>
                          {nft.description}
                        </p>
                      </div>
                      <div className='p-4 bg-black'>
                        <p className='text-3x-1 mb-4 font-bold text-white'>
                          {nft.price} ETH
                          <button className='w-full bg-purple-500 text-white font-vold py-3 px-12 rounded' onClick={() => buyNFT(nft)} >
                            Buy
                          </button>
                        </p>
                      </div>
                    </div>
                  </div>
                })
              }
            </div>
          </div>
        </div>

        {/* <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.js</code>
        </p>

        <div className={styles.grid}>
          <a href="https://nextjs.org/docs" className={styles.card}>
            <h2>Documentation &rarr;</h2>
            <p>Find in-depth information about Next.js features and API.</p>
          </a>

          <a href="https://nextjs.org/learn" className={styles.card}>
            <h2>Learn &rarr;</h2>
            <p>Learn about Next.js in an interactive course with quizzes!</p>
          </a>

          <a
            href="https://github.com/vercel/next.js/tree/canary/examples"
            className={styles.card}
          >
            <h2>Examples &rarr;</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
          >
            <h2>Deploy &rarr;</h2>
            <p>
              Instantly deploy your Next.js site to a public URL with Vercel.
            </p>
          </a>
        </div> */}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer" className='text-xl'
        >
          Copyright &copy; 2022 by Mariia Synelnyk
        </a>
      </footer>
    </div>
  )
}
